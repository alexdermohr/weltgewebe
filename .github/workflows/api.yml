name: api
on:
  pull_request:
    branches: [ main ]
    paths:
      - "apps/api/**"
      - "Cargo.toml"
      - "Cargo.lock"
      - ".github/workflows/api.yml"
  push:
    branches: [ main ]
    paths:
      - "apps/api/**"
      - ".github/workflows/api.yml"
  workflow_dispatch: {}

permissions:
  contents: read
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - name: Validate default app config
        run: |
          python3 - <<'PY'
          import yaml
          from pathlib import Path

          with Path("configs/app.defaults.yml").open("r", encoding="utf-8") as fh:
              yaml.safe_load(fh)
          PY
      - name: Inject build metadata (compile-time env)
        run: |
          echo "GIT_COMMIT_SHA=${GITHUB_SHA}" >> "$GITHUB_ENV"
          echo "BUILD_TIMESTAMP=${{ github.run_started_at }}" >> "$GITHUB_ENV"
      - uses: dtolnay/rust-toolchain@stable
      - name: Install rustfmt
        run: rustup component add rustfmt
      - name: Ensure clippy is available
        run: rustup component add clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo fmt --all -- --check
        working-directory: apps/api
      - run: cargo clippy --all-targets -- -D warnings
        working-directory: apps/api
      - run: cargo test --all-features --verbose
        working-directory: apps/api
    dependency-audit:
      name: dependency audit
      runs-on: ubuntu-latest
      if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'security'))
      steps:
        - uses: actions/checkout@v4
        - uses: dtolnay/rust-toolchain@stable
        - uses: EmbarkStudios/cargo-deny-action@v1
          with:
            arguments: check
