name: wgx-guard

on:
  push:
    paths:
      - ".wgx/**"
      - ".github/workflows/wgx-guard.yml"
      - "pyproject.toml"
      - "Cargo.toml"
  pull_request:
    paths:
      - ".wgx/**"
      - ".github/workflows/wgx-guard.yml"
      - "pyproject.toml"
      - "Cargo.toml"
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: wgx-guard-${{ github.ref }}
  cancel-in-progress: true

jobs:
  guard:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4

      - name: Check .wgx/profile.yml presence
        run: |
          test -f .wgx/profile.yml || { echo "::error::.wgx/profile.yml missing"; exit 1; }
          echo "found .wgx/profile.yml"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install PyYAML
        run: python -m pip install pyyaml
      - name: Validate minimal schema keys
        run: |
          python - <<'PY'
            import sys, yaml, pathlib

            p = pathlib.Path(".wgx/profile.yml")
            data = yaml.safe_load(p.read_text(encoding="utf-8"))
            required_top = ["version", "env_priority", "tooling", "tasks"]
            missing = [k for k in required_top if k not in data]
            if missing:
                print(f"::error::missing keys: {missing}")
                sys.exit(1)
            envp = data["env_priority"]
            if not isinstance(envp, list) or not envp:
                print("::error::env_priority must be a non-empty list")
                sys.exit(1)
            for t in ["up", "lint", "test", "build", "smoke"]:
                if t not in data["tasks"]:
                    print(f"::error::task '{t}' missing")
                    sys.exit(1)
            print("wgx profile OK")
            PY

      - name: (Optional) UV bootstrap (pyproject present)
        if: ${{ hashFiles('**/pyproject.toml') != '' }}
        run: |
          set -euo pipefail
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          uv --version
          while IFS= read -r -d '' file; do
            dir="$(dirname "$file")"
            echo "::group::uv sync in $dir"
            if [ -f "$dir/uv.lock" ]; then
              (cd "$dir" && uv sync --frozen)
            else
              (cd "$dir" && uv sync)
            fi
            echo "::endgroup::"
          done < <(find . -name "pyproject.toml" -print0)

      - name: Done
        run: echo "wgx-guard passed âœ…"
