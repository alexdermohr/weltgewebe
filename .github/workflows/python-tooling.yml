name: python-tooling

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  uv-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Python bereitstellen (f체r native Builds/ABI-Erkennung)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # uv installieren (offizieller Guide)
      # Docs: https://docs.astral.sh/uv/guides/integration/github/
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh

      - name: Show uv version
        run: ~/.local/bin/uv --version

      # Optional: Cache f체r uv (Download-/Build-Cache)
      # (uv cacht bereits aggressiv; Cache hier ist ein Extra-Booster)
      - name: Cache uv cache dir
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
          key: uv-${{ runner.os }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt', '**/uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      # Falls wir Python-Tools/Deps definieren, werden sie hier synchronisiert.
      # Reihenfolge: uv.lock preferiert, sonst requirements.txt, sonst pyproject.toml
      - name: Sync dependencies if present
        shell: bash
        run: |
          set -euxo pipefail
          UV=~/.local/bin/uv
          if [ -f "uv.lock" ]; then
            $UV sync --locked
          elif [ -f "requirements.txt" ]; then
            $UV pip sync requirements.txt
          elif [ -f "pyproject.toml" ]; then
            $UV sync
          else
            echo "No Python dependency manifest found. Skipping sync."
          fi

      # Beispiel: ein kleines Sanity-Kommando (falls sp채ter Tools wie ruff/black o.채. kommen)
      - name: Python sanity check
        run: |
          python -c "import sys; print('python ok:', sys.version)"
